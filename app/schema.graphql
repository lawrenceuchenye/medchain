schema {
  query: Query
  subscription: Subscription
}

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

type AdminAdded {
  addedBy: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  id: Bytes!
  newAdmin: Bytes!
  transactionHash: Bytes!
}

input AdminAdded_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  addedBy: Bytes
  addedBy_contains: Bytes
  addedBy_gt: Bytes
  addedBy_gte: Bytes
  addedBy_in: [Bytes!]
  addedBy_lt: Bytes
  addedBy_lte: Bytes
  addedBy_not: Bytes
  addedBy_not_contains: Bytes
  addedBy_not_in: [Bytes!]
  and: [AdminAdded_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  newAdmin: Bytes
  newAdmin_contains: Bytes
  newAdmin_gt: Bytes
  newAdmin_gte: Bytes
  newAdmin_in: [Bytes!]
  newAdmin_lt: Bytes
  newAdmin_lte: Bytes
  newAdmin_not: Bytes
  newAdmin_not_contains: Bytes
  newAdmin_not_in: [Bytes!]
  or: [AdminAdded_filter]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum AdminAdded_orderBy {
  addedBy
  blockNumber
  blockTimestamp
  id
  newAdmin
  transactionHash
}

type AdminRegistered {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  email: String!
  fullName: String!
  id: Bytes!
  ipfsHash: String!
  registeredAt: BigInt!
  transactionHash: Bytes!
  user: Bytes!
}

input AdminRegistered_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AdminRegistered_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  email: String
  email_contains: String
  email_contains_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  fullName: String
  fullName_contains: String
  fullName_contains_nocase: String
  fullName_ends_with: String
  fullName_ends_with_nocase: String
  fullName_gt: String
  fullName_gte: String
  fullName_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_not: String
  fullName_not_contains: String
  fullName_not_contains_nocase: String
  fullName_not_ends_with: String
  fullName_not_ends_with_nocase: String
  fullName_not_in: [String!]
  fullName_not_starts_with: String
  fullName_not_starts_with_nocase: String
  fullName_starts_with: String
  fullName_starts_with_nocase: String
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  ipfsHash: String
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_gt: String
  ipfsHash_gte: String
  ipfsHash_in: [String!]
  ipfsHash_lt: String
  ipfsHash_lte: String
  ipfsHash_not: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  ipfsHash_not_in: [String!]
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  or: [AdminRegistered_filter]
  registeredAt: BigInt
  registeredAt_gt: BigInt
  registeredAt_gte: BigInt
  registeredAt_in: [BigInt!]
  registeredAt_lt: BigInt
  registeredAt_lte: BigInt
  registeredAt_not: BigInt
  registeredAt_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  user: Bytes
  user_contains: Bytes
  user_gt: Bytes
  user_gte: Bytes
  user_in: [Bytes!]
  user_lt: Bytes
  user_lte: Bytes
  user_not: Bytes
  user_not_contains: Bytes
  user_not_in: [Bytes!]
}

enum AdminRegistered_orderBy {
  blockNumber
  blockTimestamp
  email
  fullName
  id
  ipfsHash
  registeredAt
  transactionHash
  user
}

type AdminRemoved {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  id: Bytes!
  removedAdmin: Bytes!
  removedBy: Bytes!
  transactionHash: Bytes!
}

input AdminRemoved_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AdminRemoved_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  or: [AdminRemoved_filter]
  removedAdmin: Bytes
  removedAdmin_contains: Bytes
  removedAdmin_gt: Bytes
  removedAdmin_gte: Bytes
  removedAdmin_in: [Bytes!]
  removedAdmin_lt: Bytes
  removedAdmin_lte: Bytes
  removedAdmin_not: Bytes
  removedAdmin_not_contains: Bytes
  removedAdmin_not_in: [Bytes!]
  removedBy: Bytes
  removedBy_contains: Bytes
  removedBy_gt: Bytes
  removedBy_gte: Bytes
  removedBy_in: [Bytes!]
  removedBy_lt: Bytes
  removedBy_lte: Bytes
  removedBy_not: Bytes
  removedBy_not_contains: Bytes
  removedBy_not_in: [Bytes!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum AdminRemoved_orderBy {
  blockNumber
  blockTimestamp
  id
  removedAdmin
  removedBy
  transactionHash
}

enum Aggregation_interval {
  day
  hour
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DoctorRegistered {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  email: String!
  fullName: String!
  hospitalAffiliation: String!
  id: Bytes!
  ipfsHash: String!
  licensure: String!
  licensureEmail: String!
  major: String!
  medicalSchoolEmail: String!
  nationality: String!
  profilePicture: String!
  registeredAt: BigInt!
  specialty: String!
  transactionHash: Bytes!
  user: Bytes!
  yearOfExpiration: BigInt!
  yearOfGraduation: BigInt!
  yearsOfExperience: BigInt!
}

input DoctorRegistered_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DoctorRegistered_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  email: String
  email_contains: String
  email_contains_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  fullName: String
  fullName_contains: String
  fullName_contains_nocase: String
  fullName_ends_with: String
  fullName_ends_with_nocase: String
  fullName_gt: String
  fullName_gte: String
  fullName_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_not: String
  fullName_not_contains: String
  fullName_not_contains_nocase: String
  fullName_not_ends_with: String
  fullName_not_ends_with_nocase: String
  fullName_not_in: [String!]
  fullName_not_starts_with: String
  fullName_not_starts_with_nocase: String
  fullName_starts_with: String
  fullName_starts_with_nocase: String
  hospitalAffiliation: String
  hospitalAffiliation_contains: String
  hospitalAffiliation_contains_nocase: String
  hospitalAffiliation_ends_with: String
  hospitalAffiliation_ends_with_nocase: String
  hospitalAffiliation_gt: String
  hospitalAffiliation_gte: String
  hospitalAffiliation_in: [String!]
  hospitalAffiliation_lt: String
  hospitalAffiliation_lte: String
  hospitalAffiliation_not: String
  hospitalAffiliation_not_contains: String
  hospitalAffiliation_not_contains_nocase: String
  hospitalAffiliation_not_ends_with: String
  hospitalAffiliation_not_ends_with_nocase: String
  hospitalAffiliation_not_in: [String!]
  hospitalAffiliation_not_starts_with: String
  hospitalAffiliation_not_starts_with_nocase: String
  hospitalAffiliation_starts_with: String
  hospitalAffiliation_starts_with_nocase: String
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  ipfsHash: String
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_gt: String
  ipfsHash_gte: String
  ipfsHash_in: [String!]
  ipfsHash_lt: String
  ipfsHash_lte: String
  ipfsHash_not: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  ipfsHash_not_in: [String!]
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  licensure: String
  licensureEmail: String
  licensureEmail_contains: String
  licensureEmail_contains_nocase: String
  licensureEmail_ends_with: String
  licensureEmail_ends_with_nocase: String
  licensureEmail_gt: String
  licensureEmail_gte: String
  licensureEmail_in: [String!]
  licensureEmail_lt: String
  licensureEmail_lte: String
  licensureEmail_not: String
  licensureEmail_not_contains: String
  licensureEmail_not_contains_nocase: String
  licensureEmail_not_ends_with: String
  licensureEmail_not_ends_with_nocase: String
  licensureEmail_not_in: [String!]
  licensureEmail_not_starts_with: String
  licensureEmail_not_starts_with_nocase: String
  licensureEmail_starts_with: String
  licensureEmail_starts_with_nocase: String
  licensure_contains: String
  licensure_contains_nocase: String
  licensure_ends_with: String
  licensure_ends_with_nocase: String
  licensure_gt: String
  licensure_gte: String
  licensure_in: [String!]
  licensure_lt: String
  licensure_lte: String
  licensure_not: String
  licensure_not_contains: String
  licensure_not_contains_nocase: String
  licensure_not_ends_with: String
  licensure_not_ends_with_nocase: String
  licensure_not_in: [String!]
  licensure_not_starts_with: String
  licensure_not_starts_with_nocase: String
  licensure_starts_with: String
  licensure_starts_with_nocase: String
  major: String
  major_contains: String
  major_contains_nocase: String
  major_ends_with: String
  major_ends_with_nocase: String
  major_gt: String
  major_gte: String
  major_in: [String!]
  major_lt: String
  major_lte: String
  major_not: String
  major_not_contains: String
  major_not_contains_nocase: String
  major_not_ends_with: String
  major_not_ends_with_nocase: String
  major_not_in: [String!]
  major_not_starts_with: String
  major_not_starts_with_nocase: String
  major_starts_with: String
  major_starts_with_nocase: String
  medicalSchoolEmail: String
  medicalSchoolEmail_contains: String
  medicalSchoolEmail_contains_nocase: String
  medicalSchoolEmail_ends_with: String
  medicalSchoolEmail_ends_with_nocase: String
  medicalSchoolEmail_gt: String
  medicalSchoolEmail_gte: String
  medicalSchoolEmail_in: [String!]
  medicalSchoolEmail_lt: String
  medicalSchoolEmail_lte: String
  medicalSchoolEmail_not: String
  medicalSchoolEmail_not_contains: String
  medicalSchoolEmail_not_contains_nocase: String
  medicalSchoolEmail_not_ends_with: String
  medicalSchoolEmail_not_ends_with_nocase: String
  medicalSchoolEmail_not_in: [String!]
  medicalSchoolEmail_not_starts_with: String
  medicalSchoolEmail_not_starts_with_nocase: String
  medicalSchoolEmail_starts_with: String
  medicalSchoolEmail_starts_with_nocase: String
  nationality: String
  nationality_contains: String
  nationality_contains_nocase: String
  nationality_ends_with: String
  nationality_ends_with_nocase: String
  nationality_gt: String
  nationality_gte: String
  nationality_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_not: String
  nationality_not_contains: String
  nationality_not_contains_nocase: String
  nationality_not_ends_with: String
  nationality_not_ends_with_nocase: String
  nationality_not_in: [String!]
  nationality_not_starts_with: String
  nationality_not_starts_with_nocase: String
  nationality_starts_with: String
  nationality_starts_with_nocase: String
  or: [DoctorRegistered_filter]
  profilePicture: String
  profilePicture_contains: String
  profilePicture_contains_nocase: String
  profilePicture_ends_with: String
  profilePicture_ends_with_nocase: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_not: String
  profilePicture_not_contains: String
  profilePicture_not_contains_nocase: String
  profilePicture_not_ends_with: String
  profilePicture_not_ends_with_nocase: String
  profilePicture_not_in: [String!]
  profilePicture_not_starts_with: String
  profilePicture_not_starts_with_nocase: String
  profilePicture_starts_with: String
  profilePicture_starts_with_nocase: String
  registeredAt: BigInt
  registeredAt_gt: BigInt
  registeredAt_gte: BigInt
  registeredAt_in: [BigInt!]
  registeredAt_lt: BigInt
  registeredAt_lte: BigInt
  registeredAt_not: BigInt
  registeredAt_not_in: [BigInt!]
  specialty: String
  specialty_contains: String
  specialty_contains_nocase: String
  specialty_ends_with: String
  specialty_ends_with_nocase: String
  specialty_gt: String
  specialty_gte: String
  specialty_in: [String!]
  specialty_lt: String
  specialty_lte: String
  specialty_not: String
  specialty_not_contains: String
  specialty_not_contains_nocase: String
  specialty_not_ends_with: String
  specialty_not_ends_with_nocase: String
  specialty_not_in: [String!]
  specialty_not_starts_with: String
  specialty_not_starts_with_nocase: String
  specialty_starts_with: String
  specialty_starts_with_nocase: String
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  user: Bytes
  user_contains: Bytes
  user_gt: Bytes
  user_gte: Bytes
  user_in: [Bytes!]
  user_lt: Bytes
  user_lte: Bytes
  user_not: Bytes
  user_not_contains: Bytes
  user_not_in: [Bytes!]
  yearOfExpiration: BigInt
  yearOfExpiration_gt: BigInt
  yearOfExpiration_gte: BigInt
  yearOfExpiration_in: [BigInt!]
  yearOfExpiration_lt: BigInt
  yearOfExpiration_lte: BigInt
  yearOfExpiration_not: BigInt
  yearOfExpiration_not_in: [BigInt!]
  yearOfGraduation: BigInt
  yearOfGraduation_gt: BigInt
  yearOfGraduation_gte: BigInt
  yearOfGraduation_in: [BigInt!]
  yearOfGraduation_lt: BigInt
  yearOfGraduation_lte: BigInt
  yearOfGraduation_not: BigInt
  yearOfGraduation_not_in: [BigInt!]
  yearsOfExperience: BigInt
  yearsOfExperience_gt: BigInt
  yearsOfExperience_gte: BigInt
  yearsOfExperience_in: [BigInt!]
  yearsOfExperience_lt: BigInt
  yearsOfExperience_lte: BigInt
  yearsOfExperience_not: BigInt
  yearsOfExperience_not_in: [BigInt!]
}

enum DoctorRegistered_orderBy {
  blockNumber
  blockTimestamp
  email
  fullName
  hospitalAffiliation
  id
  ipfsHash
  licensure
  licensureEmail
  major
  medicalSchoolEmail
  nationality
  profilePicture
  registeredAt
  specialty
  transactionHash
  user
  yearOfExpiration
  yearOfGraduation
  yearsOfExperience
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PatientRegistered {
  additionalInformation: String!
  allergies: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  dateOfBirth: String!
  email: String!
  emergencyContact1: String!
  emergencyContact2: String!
  fullName: String!
  gender: String!
  hospitalContact: String!
  hospitalEmail: String!
  id: Bytes!
  ipfsHash: String!
  medicalCondition: String!
  nationality: String!
  profilePicture: String!
  registeredAt: BigInt!
  transactionHash: Bytes!
  user: Bytes!
}

input PatientRegistered_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  additionalInformation: String
  additionalInformation_contains: String
  additionalInformation_contains_nocase: String
  additionalInformation_ends_with: String
  additionalInformation_ends_with_nocase: String
  additionalInformation_gt: String
  additionalInformation_gte: String
  additionalInformation_in: [String!]
  additionalInformation_lt: String
  additionalInformation_lte: String
  additionalInformation_not: String
  additionalInformation_not_contains: String
  additionalInformation_not_contains_nocase: String
  additionalInformation_not_ends_with: String
  additionalInformation_not_ends_with_nocase: String
  additionalInformation_not_in: [String!]
  additionalInformation_not_starts_with: String
  additionalInformation_not_starts_with_nocase: String
  additionalInformation_starts_with: String
  additionalInformation_starts_with_nocase: String
  allergies: String
  allergies_contains: String
  allergies_contains_nocase: String
  allergies_ends_with: String
  allergies_ends_with_nocase: String
  allergies_gt: String
  allergies_gte: String
  allergies_in: [String!]
  allergies_lt: String
  allergies_lte: String
  allergies_not: String
  allergies_not_contains: String
  allergies_not_contains_nocase: String
  allergies_not_ends_with: String
  allergies_not_ends_with_nocase: String
  allergies_not_in: [String!]
  allergies_not_starts_with: String
  allergies_not_starts_with_nocase: String
  allergies_starts_with: String
  allergies_starts_with_nocase: String
  and: [PatientRegistered_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  dateOfBirth: String
  dateOfBirth_contains: String
  dateOfBirth_contains_nocase: String
  dateOfBirth_ends_with: String
  dateOfBirth_ends_with_nocase: String
  dateOfBirth_gt: String
  dateOfBirth_gte: String
  dateOfBirth_in: [String!]
  dateOfBirth_lt: String
  dateOfBirth_lte: String
  dateOfBirth_not: String
  dateOfBirth_not_contains: String
  dateOfBirth_not_contains_nocase: String
  dateOfBirth_not_ends_with: String
  dateOfBirth_not_ends_with_nocase: String
  dateOfBirth_not_in: [String!]
  dateOfBirth_not_starts_with: String
  dateOfBirth_not_starts_with_nocase: String
  dateOfBirth_starts_with: String
  dateOfBirth_starts_with_nocase: String
  email: String
  email_contains: String
  email_contains_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  emergencyContact1: String
  emergencyContact1_contains: String
  emergencyContact1_contains_nocase: String
  emergencyContact1_ends_with: String
  emergencyContact1_ends_with_nocase: String
  emergencyContact1_gt: String
  emergencyContact1_gte: String
  emergencyContact1_in: [String!]
  emergencyContact1_lt: String
  emergencyContact1_lte: String
  emergencyContact1_not: String
  emergencyContact1_not_contains: String
  emergencyContact1_not_contains_nocase: String
  emergencyContact1_not_ends_with: String
  emergencyContact1_not_ends_with_nocase: String
  emergencyContact1_not_in: [String!]
  emergencyContact1_not_starts_with: String
  emergencyContact1_not_starts_with_nocase: String
  emergencyContact1_starts_with: String
  emergencyContact1_starts_with_nocase: String
  emergencyContact2: String
  emergencyContact2_contains: String
  emergencyContact2_contains_nocase: String
  emergencyContact2_ends_with: String
  emergencyContact2_ends_with_nocase: String
  emergencyContact2_gt: String
  emergencyContact2_gte: String
  emergencyContact2_in: [String!]
  emergencyContact2_lt: String
  emergencyContact2_lte: String
  emergencyContact2_not: String
  emergencyContact2_not_contains: String
  emergencyContact2_not_contains_nocase: String
  emergencyContact2_not_ends_with: String
  emergencyContact2_not_ends_with_nocase: String
  emergencyContact2_not_in: [String!]
  emergencyContact2_not_starts_with: String
  emergencyContact2_not_starts_with_nocase: String
  emergencyContact2_starts_with: String
  emergencyContact2_starts_with_nocase: String
  fullName: String
  fullName_contains: String
  fullName_contains_nocase: String
  fullName_ends_with: String
  fullName_ends_with_nocase: String
  fullName_gt: String
  fullName_gte: String
  fullName_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_not: String
  fullName_not_contains: String
  fullName_not_contains_nocase: String
  fullName_not_ends_with: String
  fullName_not_ends_with_nocase: String
  fullName_not_in: [String!]
  fullName_not_starts_with: String
  fullName_not_starts_with_nocase: String
  fullName_starts_with: String
  fullName_starts_with_nocase: String
  gender: String
  gender_contains: String
  gender_contains_nocase: String
  gender_ends_with: String
  gender_ends_with_nocase: String
  gender_gt: String
  gender_gte: String
  gender_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_not: String
  gender_not_contains: String
  gender_not_contains_nocase: String
  gender_not_ends_with: String
  gender_not_ends_with_nocase: String
  gender_not_in: [String!]
  gender_not_starts_with: String
  gender_not_starts_with_nocase: String
  gender_starts_with: String
  gender_starts_with_nocase: String
  hospitalContact: String
  hospitalContact_contains: String
  hospitalContact_contains_nocase: String
  hospitalContact_ends_with: String
  hospitalContact_ends_with_nocase: String
  hospitalContact_gt: String
  hospitalContact_gte: String
  hospitalContact_in: [String!]
  hospitalContact_lt: String
  hospitalContact_lte: String
  hospitalContact_not: String
  hospitalContact_not_contains: String
  hospitalContact_not_contains_nocase: String
  hospitalContact_not_ends_with: String
  hospitalContact_not_ends_with_nocase: String
  hospitalContact_not_in: [String!]
  hospitalContact_not_starts_with: String
  hospitalContact_not_starts_with_nocase: String
  hospitalContact_starts_with: String
  hospitalContact_starts_with_nocase: String
  hospitalEmail: String
  hospitalEmail_contains: String
  hospitalEmail_contains_nocase: String
  hospitalEmail_ends_with: String
  hospitalEmail_ends_with_nocase: String
  hospitalEmail_gt: String
  hospitalEmail_gte: String
  hospitalEmail_in: [String!]
  hospitalEmail_lt: String
  hospitalEmail_lte: String
  hospitalEmail_not: String
  hospitalEmail_not_contains: String
  hospitalEmail_not_contains_nocase: String
  hospitalEmail_not_ends_with: String
  hospitalEmail_not_ends_with_nocase: String
  hospitalEmail_not_in: [String!]
  hospitalEmail_not_starts_with: String
  hospitalEmail_not_starts_with_nocase: String
  hospitalEmail_starts_with: String
  hospitalEmail_starts_with_nocase: String
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  ipfsHash: String
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_gt: String
  ipfsHash_gte: String
  ipfsHash_in: [String!]
  ipfsHash_lt: String
  ipfsHash_lte: String
  ipfsHash_not: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  ipfsHash_not_in: [String!]
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  medicalCondition: String
  medicalCondition_contains: String
  medicalCondition_contains_nocase: String
  medicalCondition_ends_with: String
  medicalCondition_ends_with_nocase: String
  medicalCondition_gt: String
  medicalCondition_gte: String
  medicalCondition_in: [String!]
  medicalCondition_lt: String
  medicalCondition_lte: String
  medicalCondition_not: String
  medicalCondition_not_contains: String
  medicalCondition_not_contains_nocase: String
  medicalCondition_not_ends_with: String
  medicalCondition_not_ends_with_nocase: String
  medicalCondition_not_in: [String!]
  medicalCondition_not_starts_with: String
  medicalCondition_not_starts_with_nocase: String
  medicalCondition_starts_with: String
  medicalCondition_starts_with_nocase: String
  nationality: String
  nationality_contains: String
  nationality_contains_nocase: String
  nationality_ends_with: String
  nationality_ends_with_nocase: String
  nationality_gt: String
  nationality_gte: String
  nationality_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_not: String
  nationality_not_contains: String
  nationality_not_contains_nocase: String
  nationality_not_ends_with: String
  nationality_not_ends_with_nocase: String
  nationality_not_in: [String!]
  nationality_not_starts_with: String
  nationality_not_starts_with_nocase: String
  nationality_starts_with: String
  nationality_starts_with_nocase: String
  or: [PatientRegistered_filter]
  profilePicture: String
  profilePicture_contains: String
  profilePicture_contains_nocase: String
  profilePicture_ends_with: String
  profilePicture_ends_with_nocase: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_not: String
  profilePicture_not_contains: String
  profilePicture_not_contains_nocase: String
  profilePicture_not_ends_with: String
  profilePicture_not_ends_with_nocase: String
  profilePicture_not_in: [String!]
  profilePicture_not_starts_with: String
  profilePicture_not_starts_with_nocase: String
  profilePicture_starts_with: String
  profilePicture_starts_with_nocase: String
  registeredAt: BigInt
  registeredAt_gt: BigInt
  registeredAt_gte: BigInt
  registeredAt_in: [BigInt!]
  registeredAt_lt: BigInt
  registeredAt_lte: BigInt
  registeredAt_not: BigInt
  registeredAt_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  user: Bytes
  user_contains: Bytes
  user_gt: Bytes
  user_gte: Bytes
  user_in: [Bytes!]
  user_lt: Bytes
  user_lte: Bytes
  user_not: Bytes
  user_not_contains: Bytes
  user_not_in: [Bytes!]
}

enum PatientRegistered_orderBy {
  additionalInformation
  allergies
  blockNumber
  blockTimestamp
  dateOfBirth
  email
  emergencyContact1
  emergencyContact2
  fullName
  gender
  hospitalContact
  hospitalEmail
  id
  ipfsHash
  medicalCondition
  nationality
  profilePicture
  registeredAt
  transactionHash
  user
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  adminAdded(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdminAdded
  adminAddeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AdminAdded_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AdminAdded_filter
  ): [AdminAdded!]!
  adminRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdminRegistered
  adminRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AdminRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AdminRegistered_filter
  ): [AdminRegistered!]!
  adminRemoved(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdminRemoved
  adminRemoveds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AdminRemoved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AdminRemoved_filter
  ): [AdminRemoved!]!
  doctorRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DoctorRegistered
  doctorRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DoctorRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DoctorRegistered_filter
  ): [DoctorRegistered!]!
  patientRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PatientRegistered
  patientRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PatientRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PatientRegistered_filter
  ): [PatientRegistered!]!
  reportSubmitted(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReportSubmitted
  reportSubmitteds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ReportSubmitted_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ReportSubmitted_filter
  ): [ReportSubmitted!]!
  sponsorRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SponsorRegistered
  sponsorRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SponsorRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SponsorRegistered_filter
  ): [SponsorRegistered!]!
  verificationApproved(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VerificationApproved
  verificationApproveds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: VerificationApproved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: VerificationApproved_filter
  ): [VerificationApproved!]!
  verificationRequested(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VerificationRequested
  verificationRequesteds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: VerificationRequested_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: VerificationRequested_filter
  ): [VerificationRequested!]!
  volunteerRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VolunteerRegistered
  volunteerRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: VolunteerRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: VolunteerRegistered_filter
  ): [VolunteerRegistered!]!
}

type ReportSubmitted {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  id: Bytes!
  reason: String!
  reported: Bytes!
  reporter: Bytes!
  timestamp: BigInt!
  transactionHash: Bytes!
}

input ReportSubmitted_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReportSubmitted_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  or: [ReportSubmitted_filter]
  reason: String
  reason_contains: String
  reason_contains_nocase: String
  reason_ends_with: String
  reason_ends_with_nocase: String
  reason_gt: String
  reason_gte: String
  reason_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_not: String
  reason_not_contains: String
  reason_not_contains_nocase: String
  reason_not_ends_with: String
  reason_not_ends_with_nocase: String
  reason_not_in: [String!]
  reason_not_starts_with: String
  reason_not_starts_with_nocase: String
  reason_starts_with: String
  reason_starts_with_nocase: String
  reported: Bytes
  reported_contains: Bytes
  reported_gt: Bytes
  reported_gte: Bytes
  reported_in: [Bytes!]
  reported_lt: Bytes
  reported_lte: Bytes
  reported_not: Bytes
  reported_not_contains: Bytes
  reported_not_in: [Bytes!]
  reporter: Bytes
  reporter_contains: Bytes
  reporter_gt: Bytes
  reporter_gte: Bytes
  reporter_in: [Bytes!]
  reporter_lt: Bytes
  reporter_lte: Bytes
  reporter_not: Bytes
  reporter_not_contains: Bytes
  reporter_not_in: [Bytes!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
}

enum ReportSubmitted_orderBy {
  blockNumber
  blockTimestamp
  id
  reason
  reported
  reporter
  timestamp
  transactionHash
}

type SponsorRegistered {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  companyName: String!
  email: String!
  fullName: String!
  gender: String!
  id: Bytes!
  ipfsHash: String!
  nationality: String!
  profilePicture: String!
  registeredAt: BigInt!
  transactionHash: Bytes!
  user: Bytes!
}

input SponsorRegistered_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SponsorRegistered_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  companyName: String
  companyName_contains: String
  companyName_contains_nocase: String
  companyName_ends_with: String
  companyName_ends_with_nocase: String
  companyName_gt: String
  companyName_gte: String
  companyName_in: [String!]
  companyName_lt: String
  companyName_lte: String
  companyName_not: String
  companyName_not_contains: String
  companyName_not_contains_nocase: String
  companyName_not_ends_with: String
  companyName_not_ends_with_nocase: String
  companyName_not_in: [String!]
  companyName_not_starts_with: String
  companyName_not_starts_with_nocase: String
  companyName_starts_with: String
  companyName_starts_with_nocase: String
  email: String
  email_contains: String
  email_contains_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  fullName: String
  fullName_contains: String
  fullName_contains_nocase: String
  fullName_ends_with: String
  fullName_ends_with_nocase: String
  fullName_gt: String
  fullName_gte: String
  fullName_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_not: String
  fullName_not_contains: String
  fullName_not_contains_nocase: String
  fullName_not_ends_with: String
  fullName_not_ends_with_nocase: String
  fullName_not_in: [String!]
  fullName_not_starts_with: String
  fullName_not_starts_with_nocase: String
  fullName_starts_with: String
  fullName_starts_with_nocase: String
  gender: String
  gender_contains: String
  gender_contains_nocase: String
  gender_ends_with: String
  gender_ends_with_nocase: String
  gender_gt: String
  gender_gte: String
  gender_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_not: String
  gender_not_contains: String
  gender_not_contains_nocase: String
  gender_not_ends_with: String
  gender_not_ends_with_nocase: String
  gender_not_in: [String!]
  gender_not_starts_with: String
  gender_not_starts_with_nocase: String
  gender_starts_with: String
  gender_starts_with_nocase: String
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  ipfsHash: String
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_gt: String
  ipfsHash_gte: String
  ipfsHash_in: [String!]
  ipfsHash_lt: String
  ipfsHash_lte: String
  ipfsHash_not: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  ipfsHash_not_in: [String!]
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  nationality: String
  nationality_contains: String
  nationality_contains_nocase: String
  nationality_ends_with: String
  nationality_ends_with_nocase: String
  nationality_gt: String
  nationality_gte: String
  nationality_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_not: String
  nationality_not_contains: String
  nationality_not_contains_nocase: String
  nationality_not_ends_with: String
  nationality_not_ends_with_nocase: String
  nationality_not_in: [String!]
  nationality_not_starts_with: String
  nationality_not_starts_with_nocase: String
  nationality_starts_with: String
  nationality_starts_with_nocase: String
  or: [SponsorRegistered_filter]
  profilePicture: String
  profilePicture_contains: String
  profilePicture_contains_nocase: String
  profilePicture_ends_with: String
  profilePicture_ends_with_nocase: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_not: String
  profilePicture_not_contains: String
  profilePicture_not_contains_nocase: String
  profilePicture_not_ends_with: String
  profilePicture_not_ends_with_nocase: String
  profilePicture_not_in: [String!]
  profilePicture_not_starts_with: String
  profilePicture_not_starts_with_nocase: String
  profilePicture_starts_with: String
  profilePicture_starts_with_nocase: String
  registeredAt: BigInt
  registeredAt_gt: BigInt
  registeredAt_gte: BigInt
  registeredAt_in: [BigInt!]
  registeredAt_lt: BigInt
  registeredAt_lte: BigInt
  registeredAt_not: BigInt
  registeredAt_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  user: Bytes
  user_contains: Bytes
  user_gt: Bytes
  user_gte: Bytes
  user_in: [Bytes!]
  user_lt: Bytes
  user_lte: Bytes
  user_not: Bytes
  user_not_contains: Bytes
  user_not_in: [Bytes!]
}

enum SponsorRegistered_orderBy {
  blockNumber
  blockTimestamp
  companyName
  email
  fullName
  gender
  id
  ipfsHash
  nationality
  profilePicture
  registeredAt
  transactionHash
  user
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  adminAdded(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdminAdded
  adminAddeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AdminAdded_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AdminAdded_filter
  ): [AdminAdded!]!
  adminRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdminRegistered
  adminRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AdminRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AdminRegistered_filter
  ): [AdminRegistered!]!
  adminRemoved(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AdminRemoved
  adminRemoveds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AdminRemoved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AdminRemoved_filter
  ): [AdminRemoved!]!
  doctorRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DoctorRegistered
  doctorRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DoctorRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DoctorRegistered_filter
  ): [DoctorRegistered!]!
  patientRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PatientRegistered
  patientRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PatientRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PatientRegistered_filter
  ): [PatientRegistered!]!
  reportSubmitted(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReportSubmitted
  reportSubmitteds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ReportSubmitted_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ReportSubmitted_filter
  ): [ReportSubmitted!]!
  sponsorRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SponsorRegistered
  sponsorRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SponsorRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SponsorRegistered_filter
  ): [SponsorRegistered!]!
  verificationApproved(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VerificationApproved
  verificationApproveds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: VerificationApproved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: VerificationApproved_filter
  ): [VerificationApproved!]!
  verificationRequested(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VerificationRequested
  verificationRequesteds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: VerificationRequested_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: VerificationRequested_filter
  ): [VerificationRequested!]!
  volunteerRegistered(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VolunteerRegistered
  volunteerRegistereds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: VolunteerRegistered_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: VolunteerRegistered_filter
  ): [VolunteerRegistered!]!
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type VerificationApproved {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  id: Bytes!
  timestamp: BigInt!
  transactionHash: Bytes!
  volunteer: Bytes!
}

input VerificationApproved_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VerificationApproved_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  or: [VerificationApproved_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  volunteer: Bytes
  volunteer_contains: Bytes
  volunteer_gt: Bytes
  volunteer_gte: Bytes
  volunteer_in: [Bytes!]
  volunteer_lt: Bytes
  volunteer_lte: Bytes
  volunteer_not: Bytes
  volunteer_not_contains: Bytes
  volunteer_not_in: [Bytes!]
}

enum VerificationApproved_orderBy {
  blockNumber
  blockTimestamp
  id
  timestamp
  transactionHash
  volunteer
}

type VerificationRequested {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  id: Bytes!
  timestamp: BigInt!
  transactionHash: Bytes!
  volunteer: Bytes!
}

input VerificationRequested_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VerificationRequested_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  or: [VerificationRequested_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  volunteer: Bytes
  volunteer_contains: Bytes
  volunteer_gt: Bytes
  volunteer_gte: Bytes
  volunteer_in: [Bytes!]
  volunteer_lt: Bytes
  volunteer_lte: Bytes
  volunteer_not: Bytes
  volunteer_not_contains: Bytes
  volunteer_not_in: [Bytes!]
}

enum VerificationRequested_orderBy {
  blockNumber
  blockTimestamp
  id
  timestamp
  transactionHash
  volunteer
}

type VolunteerRegistered {
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  email: String!
  fullName: String!
  gender: String!
  id: Bytes!
  ipfsHash: String!
  nationality: String!
  profilePicture: String!
  registeredAt: BigInt!
  transactionHash: Bytes!
  user: Bytes!
}

input VolunteerRegistered_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VolunteerRegistered_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  email: String
  email_contains: String
  email_contains_nocase: String
  email_ends_with: String
  email_ends_with_nocase: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_contains_nocase: String
  email_not_ends_with: String
  email_not_ends_with_nocase: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_not_starts_with_nocase: String
  email_starts_with: String
  email_starts_with_nocase: String
  fullName: String
  fullName_contains: String
  fullName_contains_nocase: String
  fullName_ends_with: String
  fullName_ends_with_nocase: String
  fullName_gt: String
  fullName_gte: String
  fullName_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_not: String
  fullName_not_contains: String
  fullName_not_contains_nocase: String
  fullName_not_ends_with: String
  fullName_not_ends_with_nocase: String
  fullName_not_in: [String!]
  fullName_not_starts_with: String
  fullName_not_starts_with_nocase: String
  fullName_starts_with: String
  fullName_starts_with_nocase: String
  gender: String
  gender_contains: String
  gender_contains_nocase: String
  gender_ends_with: String
  gender_ends_with_nocase: String
  gender_gt: String
  gender_gte: String
  gender_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_not: String
  gender_not_contains: String
  gender_not_contains_nocase: String
  gender_not_ends_with: String
  gender_not_ends_with_nocase: String
  gender_not_in: [String!]
  gender_not_starts_with: String
  gender_not_starts_with_nocase: String
  gender_starts_with: String
  gender_starts_with_nocase: String
  id: Bytes
  id_contains: Bytes
  id_gt: Bytes
  id_gte: Bytes
  id_in: [Bytes!]
  id_lt: Bytes
  id_lte: Bytes
  id_not: Bytes
  id_not_contains: Bytes
  id_not_in: [Bytes!]
  ipfsHash: String
  ipfsHash_contains: String
  ipfsHash_contains_nocase: String
  ipfsHash_ends_with: String
  ipfsHash_ends_with_nocase: String
  ipfsHash_gt: String
  ipfsHash_gte: String
  ipfsHash_in: [String!]
  ipfsHash_lt: String
  ipfsHash_lte: String
  ipfsHash_not: String
  ipfsHash_not_contains: String
  ipfsHash_not_contains_nocase: String
  ipfsHash_not_ends_with: String
  ipfsHash_not_ends_with_nocase: String
  ipfsHash_not_in: [String!]
  ipfsHash_not_starts_with: String
  ipfsHash_not_starts_with_nocase: String
  ipfsHash_starts_with: String
  ipfsHash_starts_with_nocase: String
  nationality: String
  nationality_contains: String
  nationality_contains_nocase: String
  nationality_ends_with: String
  nationality_ends_with_nocase: String
  nationality_gt: String
  nationality_gte: String
  nationality_in: [String!]
  nationality_lt: String
  nationality_lte: String
  nationality_not: String
  nationality_not_contains: String
  nationality_not_contains_nocase: String
  nationality_not_ends_with: String
  nationality_not_ends_with_nocase: String
  nationality_not_in: [String!]
  nationality_not_starts_with: String
  nationality_not_starts_with_nocase: String
  nationality_starts_with: String
  nationality_starts_with_nocase: String
  or: [VolunteerRegistered_filter]
  profilePicture: String
  profilePicture_contains: String
  profilePicture_contains_nocase: String
  profilePicture_ends_with: String
  profilePicture_ends_with_nocase: String
  profilePicture_gt: String
  profilePicture_gte: String
  profilePicture_in: [String!]
  profilePicture_lt: String
  profilePicture_lte: String
  profilePicture_not: String
  profilePicture_not_contains: String
  profilePicture_not_contains_nocase: String
  profilePicture_not_ends_with: String
  profilePicture_not_ends_with_nocase: String
  profilePicture_not_in: [String!]
  profilePicture_not_starts_with: String
  profilePicture_not_starts_with_nocase: String
  profilePicture_starts_with: String
  profilePicture_starts_with_nocase: String
  registeredAt: BigInt
  registeredAt_gt: BigInt
  registeredAt_gte: BigInt
  registeredAt_in: [BigInt!]
  registeredAt_lt: BigInt
  registeredAt_lte: BigInt
  registeredAt_not: BigInt
  registeredAt_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_contains: Bytes
  transactionHash_gt: Bytes
  transactionHash_gte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_lt: Bytes
  transactionHash_lte: Bytes
  transactionHash_not: Bytes
  transactionHash_not_contains: Bytes
  transactionHash_not_in: [Bytes!]
  user: Bytes
  user_contains: Bytes
  user_gt: Bytes
  user_gte: Bytes
  user_in: [Bytes!]
  user_lt: Bytes
  user_lte: Bytes
  user_not: Bytes
  user_not_contains: Bytes
  user_not_in: [Bytes!]
}

enum VolunteerRegistered_orderBy {
  blockNumber
  blockTimestamp
  email
  fullName
  gender
  id
  ipfsHash
  nationality
  profilePicture
  registeredAt
  transactionHash
  user
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """The hash of the parent block"""
  parentHash: Bytes
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}